import { _lt } from "../../translation";
export const conditionalFormattingTerms = {
    CF_TITLE: _lt("Format rules"),
    IS_RULE: _lt("Format cells if..."),
    FORMATTING_STYLE: _lt("Formatting style"),
    BOLD: _lt("Bold"),
    ITALIC: _lt("Italic"),
    UNDERLINE: _lt("Underline"),
    STRIKE_THROUGH: _lt("Strikethrough"),
    TEXT_COLOR: _lt("Text Color"),
    FILL_COLOR: _lt("Fill Color"),
    CANCEL: _lt("Cancel"),
    SAVE: _lt("Save"),
    PREVIEW_TEXT: _lt("Preview text"),
    Errors: {
        [20 /* InvalidRange */]: _lt("The range is invalid"),
        [34 /* FirstArgMissing */]: _lt("The argument is missing. Please provide a value"),
        [35 /* SecondArgMissing */]: _lt("The second argument is missing. Please provide a value"),
        [36 /* MinNaN */]: _lt("The minpoint must be a number"),
        [37 /* MidNaN */]: _lt("The midpoint must be a number"),
        [38 /* MaxNaN */]: _lt("The maxpoint must be a number"),
        [39 /* ValueUpperInflectionNaN */]: _lt("The first value must be a number"),
        [40 /* ValueLowerInflectionNaN */]: _lt("The second value must be a number"),
        [30 /* MinBiggerThanMax */]: _lt("Minimum must be smaller then Maximum"),
        [33 /* MinBiggerThanMid */]: _lt("Minimum must be smaller then Midpoint"),
        [32 /* MidBiggerThanMax */]: _lt("Midpoint must be smaller then Maximum"),
        [31 /* LowerBiggerThanUpper */]: _lt("Lower inflection point must be smaller then upper inflection point"),
        [41 /* MinInvalidFormula */]: _lt("Invalid Minpoint formula"),
        [43 /* MaxInvalidFormula */]: _lt("Invalid Maxpoint formula"),
        [42 /* MidInvalidFormula */]: _lt("Invalid Midpoint formula"),
        [44 /* ValueUpperInvalidFormula */]: _lt("Invalid upper inflection point formula"),
        [45 /* ValueLowerInvalidFormula */]: _lt("Invalid lower inflection point formula"),
        [19 /* EmptyRange */]: _lt("A range needs to be defined"),
        unexpected: _lt("The rule is invalid for an unknown reason"),
    },
    SingleColor: _lt("Single color"),
    ColorScale: _lt("Color scale"),
    IconSet: _lt("Icon set"),
    newRule: _lt("Add another rule"),
    reorderRules: _lt("Reorder rules"),
    exitReorderMode: _lt("Stop reordering rules"),
    FixedNumber: _lt("Number"),
    Percentage: _lt("Percentage"),
    Percentile: _lt("Percentile"),
    Formula: _lt("Formula"),
};
export const colorScale = {
    CellValues: _lt("Cell values"),
    None: _lt("None"),
    Preview: _lt("Preview"),
    Minpoint: _lt("Minpoint"),
    MaxPoint: _lt("Maxpoint"),
    MidPoint: _lt("Midpoint"),
};
export const iconSetRule = {
    WhenValueIs: _lt("When value is"),
    Else: _lt("Else"),
    ReverseIcons: _lt("Reverse icons"),
    Icons: _lt("Icons"),
    Type: _lt("Type"),
    Value: _lt("Value"),
};
export const cellIsOperators = {
    IsEmpty: _lt("Is empty"),
    IsNotEmpty: _lt("Is not empty"),
    ContainsText: _lt("Contains"),
    NotContains: _lt("Does not contain"),
    BeginsWith: _lt("Starts with"),
    EndsWith: _lt("Ends with"),
    Equal: _lt("Is equal to"),
    NotEqual: _lt("Is not equal to"),
    GreaterThan: _lt("Is greater than"),
    GreaterThanOrEqual: _lt("Is greater than or equal to"),
    LessThan: _lt("Is less than"),
    LessThanOrEqual: _lt("Is less than or equal to"),
    Between: _lt("Is between"),
    NotBetween: _lt("Is not between"),
};
export const chartTerms = {
    ChartType: _lt("Chart type"),
    Line: _lt("Line"),
    Bar: _lt("Bar"),
    Pie: _lt("Pie"),
    StackedBar: _lt("Stacked barchart"),
    Title: _lt("Title"),
    Series: _lt("Series"),
    DataSeries: _lt("Data Series"),
    MyDataHasTitle: _lt("Data series include title"),
    DataCategories: _lt("Categories / Labels"),
    UpdateChart: _lt("Update chart"),
    CreateChart: _lt("Create chart"),
    TitlePlaceholder: _lt("New Chart"),
    BackgroundColor: _lt("Background color"),
    SelectColor: _lt("Select a color..."),
    VerticalAxisPosition: _lt("Vertical axis position"),
    LegendPosition: _lt("Legend position"),
    Left: _lt("Left"),
    Right: _lt("Right"),
    None: _lt("None"),
    Top: _lt("Top"),
    Bottom: _lt("Bottom"),
    Center: _lt("Center"),
    Linear: _lt("Linear"),
    Exponential: _lt("Exponential"),
    Logarithmic: _lt("Logarithmic"),
    Errors: {
        [25 /* EmptyDataSet */]: _lt("A dataset needs to be defined"),
        [26 /* InvalidDataSet */]: _lt("The dataset is invalid"),
        [27 /* InvalidLabelRange */]: _lt("Labels are invalid"),
        unexpected: _lt("The chart definition is invalid for an unknown reason"),
    },
};
export const FindAndReplaceTerms = {
    Search: _lt("Search"),
    Replace: _lt("Replace"),
    Next: _lt("Next"),
    Previous: _lt("Previous"),
    MatchCase: _lt("Match case"),
    ExactMatch: _lt("Match entire cell content"),
    SearchFormulas: _lt("Search in formulas"),
    ReplaceAll: _lt("Replace all"),
    ReplaceFormulas: _lt("Also modify formulas"),
};
export const LinkEditorTerms = {
    Text: _lt("Text"),
    Link: _lt("Link"),
    Confirm: _lt("Confirm"),
    Cancel: _lt("Cancel"),
    Edit: _lt("Edit link"),
    Remove: _lt("Remove link"),
};
export const GenericWords = {
    And: _lt("and"),
};
//# sourceMappingURL=translations_terms.js.map